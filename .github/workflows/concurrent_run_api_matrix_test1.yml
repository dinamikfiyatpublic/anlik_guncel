name: concurrent_run_api_matrix_test1

on:
  workflow_dispatch:

jobs:
  scrape:
    runs-on: ubuntu-latest

    env:
      PG_CONNECTION_STRING_BASE: ${{ secrets.PG_CONNECTION_STRING_BASE }}
      PG_SUPABASEURL: ${{ secrets.PG_SUPABASEURL }}
      PG_SUPABASEKEY: ${{ secrets.PG_SUPABASEKEY }}
      PG_PROXYPORT: ${{ secrets.PG_PROXYPORT }}
      PG_PROXYUSERNAME: ${{ secrets.PG_PROXYUSERNAME }}
      PG_PROXYPASSWORD: ${{ secrets.PG_PROXYPASSWORD }}
      PROXY_IP: ${{ secrets.PROXY_IP }}
      PROXY_PORT: ${{ secrets.PROXY_PORT }}
      PROXY_USER: ${{ secrets.PROXY_USER }}
      PROXY_PASS: ${{ secrets.PROXY_PASS }}
      PG_SCRPEANT: ${{ secrets.PG_SCRPEANT }}
      PG_DB_USER: ${{ secrets.PG_DB_USER }}
      PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
      PG_HOST: ${{ secrets.PG_HOST }}
      PG_PORT: ${{ secrets.PG_PORT }}
      PG_NAME: ${{ secrets.PG_NAME }}
      PG_VIEW_NAME: ${{ secrets.PG_VIEW_NAME }}
      MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }} 
      NODE_OPTIONS: --unhandled-rejections=strict

    strategy:
      matrix:
        script: [ 
          "scrape_api_urunlerim_rakipler_kalan1.mjs",
          "scrape_api_urunlerim_rakipler_kalan2.mjs",
          "scrape_api_urunlerim_rakipler_kalan3.mjs",
          "scrape_api_urunlerim_rakipler_kalan4.mjs",
          "scrape_api_urunlerim_rakipler_kalan5.mjs",
          "scrape_api_urunlerim_rakipler_kalan6.mjs",
          "scrape_api_urunlerim_rakipler_kalan7.mjs",
          "scrape_api_urunlerim_rakipler_kalan8.mjs",
          "scrape_api_urunlerim_rakipler_kalan9.mjs",
          "scrape_api_urunlerim_rakipler_kalan10.mjs" ]

    steps:
      - name: Check if user is authorized
        if: github.actor != github.repository_owner
        run: |
          echo "‚ùå Unauthorized user: ${{ github.actor }}"
          exit 1

      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Chrome
        uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable

      - name: Install xvfb
        run: sudo apt-get update && sudo apt-get install -y xvfb jq

      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Ensure tailscaled is not already running
        run: |
          if pgrep tailscaled; then
              echo "tailscaled already running. Skipping start."
            else
              echo "Starting tailscaled..."
              sudo tailscaled &
              sleep 5
            fi

      - name: Connect to Tailscale with Auth Key and Exit Node
        run: |
          sudo tailscale up \
            --authkey=${{ secrets.TS_AUTH_KEY }} \
            --exit-node=100.77.251.95 \
            --exit-node-allow-lan-access \
            --accept-routes \
            --accept-dns

          echo "‚úÖ Tailscale IP (internal):"
          tailscale ip -4

      - name: Check Tailscale status
        run: |
          tailscale status

      - name: Wait for Tailscale connection
        run: |
          sleep 10  

      - name: Show external IP and location info
        run: |
          echo "üîç Getting external IP..."
          IP=$(curl -s https://ifconfig.me || curl -s https://api.ipify.org)
          echo "üåê External IP: $IP"

          echo "üåç Getting geolocation info..."
          GEO=$(curl -s https://ipapi.co/$IP/json/)
          echo "üìç Location:"
          echo "$GEO" | jq '.ip, .city, .region, .country_name, .org'

      - name: Run scraper through T√ºrkiye IP
        run: |
          echo "Running scraper: ${{ matrix.script }}"
          cd tests
          node ${{ matrix.script }}

      - name: Disconnect from Tailscale
        if: always()
        run: |
          sudo tailscale logout
